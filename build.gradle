plugins {
	id 'fabric-loom' version '1.2+'
	id 'io.github.juuxel.loom-quiltflower' version '1.8.+'
	id 'maven-publish'
	id 'java-library'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
	id "com.modrinth.minotaur" version "2.+"
	id 'com.matthewprenger.cursegradle' version '1.4.+'
}

def targetJavaVersion = 17

group = project.maven_group
version = "${project.mod_version}+${project.minecraft_version}"
archivesBaseName = project.archives_base_name

boolean isMCVersionNonRelease() {
	return project.minecraft_version.matches('^\\d\\dw\\d\\d[a-z]$')
		|| project.minecraft_version.matches('\\d+\\.\\d+-(pre|rc)(\\d+)')
}

String getVersionType() {
	if (isMCVersionNonRelease() || version.contains("-alpha.")) {
		return "alpha"
	} else if (version.contains("-beta.")) {
		return "beta"
	} else {
		return "release"
	}
}

String getMCVersionString() {
	if (isMCVersionNonRelease()) {
		return project.minecraft_version
	}
	def version = project.minecraft_version.split('\\.')
	return version[0] + '.' + version[1]
}

repositories {
	mavenCentral()

	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}

	maven {
		name "Terraformersmc"
		url = "https://maven.terraformersmc.com/"
	}

	maven {
		name "Jitpack"
		url = "https://jitpack.io"
	}

	maven {
		name = "AperLambda"
		url = 'https://aperlambda.github.io/maven'
	}

	maven {
		name = 'Gegy'
		url = 'https://maven.gegy.dev/'
	}

	maven {
		name "Quilt"
		url "https://maven.quiltmc.org/repository/release"
	}
}

configurations {
	shadow
	api.extendsFrom shadow
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "org.quiltmc:quilt-mappings:${minecraft_version}+build.${project.quilt_mappings}:intermediary-v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// ModMenu dependency
	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

	// SpruceUI dependency
	modImplementation include("dev.lambdaurora:spruceui:${project.spruceui_version}")

	// Toml Night-Config
	shadow 'com.electronwill.night-config:core:3.6.6'
	shadow 'com.electronwill.night-config:toml:3.6.6'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}

shadowJar {
	dependsOn jar
	configurations = [project.configurations.shadow]
	archiveClassifier.set('dev')

	relocate 'com.electronwill.nightconfig', 'com.github.quaoz.shadow.nightconfig'
}

remapJar.dependsOn(shadowJar)

modrinth {
	projectId = project.modrinth_id

	versionName = "BetterLeads v${project.mod_version} (${getMCVersionString()})"
	versionType = isMCVersionNonRelease() ? "beta" : "release"

	gameVersions = [project.minecraft_version]
	loaders = ["fabric", "quilt"]
	uploadFile = tasks.remapJar

	dependencies {
		required.project "fabric-api"
		optional.project "modmenu"
	}

	syncBodyFrom = rootProject.file("README.md").text
}
tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

curseforge {
	if (System.getenv("CURSEFORGE_TOKEN")) {
		apiKey = System.getenv("CURSEFORGE_TOKEN")
	}

	project {
		id = project.curseforge_id
		releaseType = this.getVersionType()
		addGameVersion project.minecraft_version
		addGameVersion "Fabric"
		addGameVersion "Quilt"
		addGameVersion "Java 17"
		addGameVersion "Java 18"

		mainArtifact(remapJar) {
			displayName = "BetterLeads v${project.mod_version} (${project.minecraft_version})"

			relations {
				requiredDependency "fabric-api"
				optionalDependency "modmenu"
			}
		}

		afterEvaluate {
			uploadTask.dependsOn("remapJar")
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {

	}
}
